// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: seats.sql

package db

import (
	"context"
)

const createSeat = `-- name: CreateSeat :one
INSERT INTO seats (screen_id, row, col, status)
VALUES ($1, $2, $3, $4)
RETURNING id, screen_id, row, col, status, created_at, updated_at
`

type CreateSeatParams struct {
	ScreenID int32  `json:"screen_id"`
	Row      int32  `json:"row"`
	Col      int32  `json:"col"`
	Status   string `json:"status"`
}

func (q *Queries) CreateSeat(ctx context.Context, arg CreateSeatParams) (Seat, error) {
	row := q.db.QueryRowContext(ctx, createSeat,
		arg.ScreenID,
		arg.Row,
		arg.Col,
		arg.Status,
	)
	var i Seat
	err := row.Scan(
		&i.ID,
		&i.ScreenID,
		&i.Row,
		&i.Col,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSeat = `-- name: DeleteSeat :exec
DELETE FROM seats WHERE id = $1
`

func (q *Queries) DeleteSeat(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSeat, id)
	return err
}

const getSeat = `-- name: GetSeat :one
SELECT id, screen_id, row, col, status, created_at, updated_at FROM seats WHERE id = $1
`

func (q *Queries) GetSeat(ctx context.Context, id int64) (Seat, error) {
	row := q.db.QueryRowContext(ctx, getSeat, id)
	var i Seat
	err := row.Scan(
		&i.ID,
		&i.ScreenID,
		&i.Row,
		&i.Col,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSeatsByScreen = `-- name: ListSeatsByScreen :many
SELECT id, screen_id, row, col, status, created_at, updated_at FROM seats WHERE screen_id = $1 ORDER BY row, col
`

func (q *Queries) ListSeatsByScreen(ctx context.Context, screenID int32) ([]Seat, error) {
	rows, err := q.db.QueryContext(ctx, listSeatsByScreen, screenID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Seat{}
	for rows.Next() {
		var i Seat
		if err := rows.Scan(
			&i.ID,
			&i.ScreenID,
			&i.Row,
			&i.Col,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSeatStatus = `-- name: UpdateSeatStatus :one
UPDATE seats
SET status = $2, updated_at = now()
WHERE id = $1
RETURNING id, screen_id, row, col, status, created_at, updated_at
`

type UpdateSeatStatusParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateSeatStatus(ctx context.Context, arg UpdateSeatStatusParams) (Seat, error) {
	row := q.db.QueryRowContext(ctx, updateSeatStatus, arg.ID, arg.Status)
	var i Seat
	err := row.Scan(
		&i.ID,
		&i.ScreenID,
		&i.Row,
		&i.Col,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
