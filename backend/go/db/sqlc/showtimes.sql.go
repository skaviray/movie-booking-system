// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: showtimes.sql

package db

import (
	"context"
	"time"
)

const createShowtime = `-- name: CreateShowtime :one
INSERT INTO showtimes (movie_id, screen_id, start_time, price)
VALUES ($1, $2, $3, $4)
RETURNING id, movie_id, screen_id, start_time, price, created_at, updated_at
`

type CreateShowtimeParams struct {
	MovieID   int32     `json:"movie_id"`
	ScreenID  int32     `json:"screen_id"`
	StartTime time.Time `json:"start_time"`
	Price     float64   `json:"price"`
}

func (q *Queries) CreateShowtime(ctx context.Context, arg CreateShowtimeParams) (Showtime, error) {
	row := q.db.QueryRowContext(ctx, createShowtime,
		arg.MovieID,
		arg.ScreenID,
		arg.StartTime,
		arg.Price,
	)
	var i Showtime
	err := row.Scan(
		&i.ID,
		&i.MovieID,
		&i.ScreenID,
		&i.StartTime,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteShowtime = `-- name: DeleteShowtime :exec
DELETE FROM showtimes WHERE id = $1
`

func (q *Queries) DeleteShowtime(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteShowtime, id)
	return err
}

const getShowtime = `-- name: GetShowtime :one
SELECT id, movie_id, screen_id, start_time, price, created_at, updated_at FROM showtimes WHERE id = $1
`

func (q *Queries) GetShowtime(ctx context.Context, id int64) (Showtime, error) {
	row := q.db.QueryRowContext(ctx, getShowtime, id)
	var i Showtime
	err := row.Scan(
		&i.ID,
		&i.MovieID,
		&i.ScreenID,
		&i.StartTime,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listShowtimes = `-- name: ListShowtimes :many
SELECT id, movie_id, screen_id, start_time, price, created_at, updated_at FROM showtimes ORDER BY start_time
`

func (q *Queries) ListShowtimes(ctx context.Context) ([]Showtime, error) {
	rows, err := q.db.QueryContext(ctx, listShowtimes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Showtime{}
	for rows.Next() {
		var i Showtime
		if err := rows.Scan(
			&i.ID,
			&i.MovieID,
			&i.ScreenID,
			&i.StartTime,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShowtime = `-- name: UpdateShowtime :one
UPDATE showtimes
SET start_time = $2, price = $3, updated_at = now()
WHERE id = $1
RETURNING id, movie_id, screen_id, start_time, price, created_at, updated_at
`

type UpdateShowtimeParams struct {
	ID        int64     `json:"id"`
	StartTime time.Time `json:"start_time"`
	Price     float64   `json:"price"`
}

func (q *Queries) UpdateShowtime(ctx context.Context, arg UpdateShowtimeParams) (Showtime, error) {
	row := q.db.QueryRowContext(ctx, updateShowtime, arg.ID, arg.StartTime, arg.Price)
	var i Showtime
	err := row.Scan(
		&i.ID,
		&i.MovieID,
		&i.ScreenID,
		&i.StartTime,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
