// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customers.sql

package db

import (
	"context"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (name, is_gold, phone)
VALUES ($1, $2, $3)
RETURNING id, name, is_gold, phone, created_at, updated_at
`

type CreateCustomerParams struct {
	Name   string `json:"name"`
	IsGold bool   `json:"is_gold"`
	Phone  string `json:"phone"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer, arg.Name, arg.IsGold, arg.Phone)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsGold,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, name, is_gold, phone, created_at, updated_at FROM customers WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsGold,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, name, is_gold, phone, created_at, updated_at FROM customers
ORDER BY id
`

func (q *Queries) ListCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsGold,
			&i.Phone,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :one

UPDATE customers
SET name = $2, is_gold = $3, phone = $4
WHERE id = $1
RETURNING id, name, is_gold, phone, created_at, updated_at
`

type UpdateCustomerParams struct {
	ID     int64  `json:"id"`
	Name   string `json:"name"`
	IsGold bool   `json:"is_gold"`
	Phone  string `json:"phone"`
}

// LIMIT $1 OFFSET $2;
func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, updateCustomer,
		arg.ID,
		arg.Name,
		arg.IsGold,
		arg.Phone,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsGold,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
