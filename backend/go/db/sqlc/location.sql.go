// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: location.sql

package db

import (
	"context"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO locations (city, state, country, address)
VALUES ($1, $2, $3, $4)
RETURNING id, city, state, country, address, created_at, updated_at
`

type CreateLocationParams struct {
	City    string `json:"city"`
	State   string `json:"state"`
	Country string `json:"country"`
	Address string `json:"address"`
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, createLocation,
		arg.City,
		arg.State,
		arg.Country,
		arg.Address,
	)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.City,
		&i.State,
		&i.Country,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLocation = `-- name: DeleteLocation :exec
DELETE FROM locations WHERE id = $1
`

func (q *Queries) DeleteLocation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLocation, id)
	return err
}

const getLocation = `-- name: GetLocation :one
SELECT id, city, state, country, address, created_at, updated_at FROM locations WHERE id = $1
`

func (q *Queries) GetLocation(ctx context.Context, id int64) (Location, error) {
	row := q.db.QueryRowContext(ctx, getLocation, id)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.City,
		&i.State,
		&i.Country,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listLocations = `-- name: ListLocations :many
SELECT id, city, state, country, address, created_at, updated_at FROM locations ORDER BY id
`

func (q *Queries) ListLocations(ctx context.Context) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, listLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Location{}
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.City,
			&i.State,
			&i.Country,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLocation = `-- name: UpdateLocation :one
UPDATE locations
SET city = $2, state = $3, country = $4, address = $5, updated_at = now()
WHERE id = $1
RETURNING id, city, state, country, address, created_at, updated_at
`

type UpdateLocationParams struct {
	ID      int64  `json:"id"`
	City    string `json:"city"`
	State   string `json:"state"`
	Country string `json:"country"`
	Address string `json:"address"`
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, updateLocation,
		arg.ID,
		arg.City,
		arg.State,
		arg.Country,
		arg.Address,
	)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.City,
		&i.State,
		&i.Country,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
