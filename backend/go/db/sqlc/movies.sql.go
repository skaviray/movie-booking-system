// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: movies.sql

package db

import (
	"context"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (title, genre_id, number_in_stock, daily_rental_rate)
VALUES ($1, $2, $3, $4)
RETURNING id, title, genre_id, number_in_stock, daily_rental_rate, created_at, updated_at
`

type CreateMovieParams struct {
	Title           string  `json:"title"`
	GenreID         int32   `json:"genre_id"`
	NumberInStock   int32   `json:"number_in_stock"`
	DailyRentalRate float64 `json:"daily_rental_rate"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, createMovie,
		arg.Title,
		arg.GenreID,
		arg.NumberInStock,
		arg.DailyRentalRate,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.GenreID,
		&i.NumberInStock,
		&i.DailyRentalRate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMovie = `-- name: DeleteMovie :exec
DELETE FROM movies WHERE id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMovie, id)
	return err
}

const getMovie = `-- name: GetMovie :one
SELECT id, title, genre_id, number_in_stock, daily_rental_rate, created_at, updated_at FROM movies WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMovie(ctx context.Context, id int64) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.GenreID,
		&i.NumberInStock,
		&i.DailyRentalRate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMovies = `-- name: ListMovies :many
SELECT id, title, genre_id, number_in_stock, daily_rental_rate, created_at, updated_at FROM movies
ORDER BY id
`

func (q *Queries) ListMovies(ctx context.Context) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, listMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Movie{}
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.GenreID,
			&i.NumberInStock,
			&i.DailyRentalRate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :one

UPDATE movies
SET title = $2,
    genre_id = $3,
    number_in_stock = $4,
    daily_rental_rate = $5
WHERE id = $1
RETURNING id, title, genre_id, number_in_stock, daily_rental_rate, created_at, updated_at
`

type UpdateMovieParams struct {
	ID              int64   `json:"id"`
	Title           string  `json:"title"`
	GenreID         int32   `json:"genre_id"`
	NumberInStock   int32   `json:"number_in_stock"`
	DailyRentalRate float64 `json:"daily_rental_rate"`
}

// LIMIT $1 OFFSET $2;
func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, updateMovie,
		arg.ID,
		arg.Title,
		arg.GenreID,
		arg.NumberInStock,
		arg.DailyRentalRate,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.GenreID,
		&i.NumberInStock,
		&i.DailyRentalRate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
