// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: theatres.sql

package db

import (
	"context"
)

const createTheater = `-- name: CreateTheater :one
INSERT INTO theaters (name, location)
VALUES ($1, $2)
RETURNING id, name, location, created_at, updated_at
`

type CreateTheaterParams struct {
	Name     string `json:"name"`
	Location int32  `json:"location"`
}

func (q *Queries) CreateTheater(ctx context.Context, arg CreateTheaterParams) (Theater, error) {
	row := q.db.QueryRowContext(ctx, createTheater, arg.Name, arg.Location)
	var i Theater
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTheater = `-- name: DeleteTheater :exec
DELETE FROM theaters WHERE id = $1
`

func (q *Queries) DeleteTheater(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTheater, id)
	return err
}

const getTheater = `-- name: GetTheater :one
SELECT id, name, location, created_at, updated_at FROM theaters WHERE id = $1
`

func (q *Queries) GetTheater(ctx context.Context, id int64) (Theater, error) {
	row := q.db.QueryRowContext(ctx, getTheater, id)
	var i Theater
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTheaters = `-- name: ListTheaters :many
SELECT id, name, location, created_at, updated_at FROM theaters ORDER BY id
`

func (q *Queries) ListTheaters(ctx context.Context) ([]Theater, error) {
	rows, err := q.db.QueryContext(ctx, listTheaters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Theater{}
	for rows.Next() {
		var i Theater
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTheater = `-- name: UpdateTheater :one
UPDATE theaters
SET name = $2, location = $3, updated_at = now()
WHERE id = $1
RETURNING id, name, location, created_at, updated_at
`

type UpdateTheaterParams struct {
	ID       int64  `json:"id"`
	Name     string `json:"name"`
	Location int32  `json:"location"`
}

func (q *Queries) UpdateTheater(ctx context.Context, arg UpdateTheaterParams) (Theater, error) {
	row := q.db.QueryRowContext(ctx, updateTheater, arg.ID, arg.Name, arg.Location)
	var i Theater
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
