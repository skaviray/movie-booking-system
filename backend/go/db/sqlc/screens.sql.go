// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: screens.sql

package db

import (
	"context"
)

const createScreen = `-- name: CreateScreen :one
INSERT INTO screens (theater_id, name)
VALUES ($1, $2)
RETURNING id, theater_id, name, created_at, updated_at
`

type CreateScreenParams struct {
	TheaterID int32  `json:"theater_id"`
	Name      string `json:"name"`
}

func (q *Queries) CreateScreen(ctx context.Context, arg CreateScreenParams) (Screen, error) {
	row := q.db.QueryRowContext(ctx, createScreen, arg.TheaterID, arg.Name)
	var i Screen
	err := row.Scan(
		&i.ID,
		&i.TheaterID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteScreen = `-- name: DeleteScreen :exec
DELETE FROM screens WHERE id = $1
`

func (q *Queries) DeleteScreen(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteScreen, id)
	return err
}

const getScreen = `-- name: GetScreen :one
SELECT id, theater_id, name, created_at, updated_at FROM screens WHERE id = $1
`

func (q *Queries) GetScreen(ctx context.Context, id int64) (Screen, error) {
	row := q.db.QueryRowContext(ctx, getScreen, id)
	var i Screen
	err := row.Scan(
		&i.ID,
		&i.TheaterID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listScreens = `-- name: ListScreens :many
SELECT id, theater_id, name, created_at, updated_at FROM screens ORDER BY id
`

func (q *Queries) ListScreens(ctx context.Context) ([]Screen, error) {
	rows, err := q.db.QueryContext(ctx, listScreens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Screen{}
	for rows.Next() {
		var i Screen
		if err := rows.Scan(
			&i.ID,
			&i.TheaterID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listScreensByTheater = `-- name: ListScreensByTheater :many
SELECT id, theater_id, name, created_at, updated_at FROM screens WHERE theater_id = $1
`

func (q *Queries) ListScreensByTheater(ctx context.Context, theaterID int32) ([]Screen, error) {
	rows, err := q.db.QueryContext(ctx, listScreensByTheater, theaterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Screen{}
	for rows.Next() {
		var i Screen
		if err := rows.Scan(
			&i.ID,
			&i.TheaterID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateScreen = `-- name: UpdateScreen :one
UPDATE screens
SET name = $2, updated_at = now()
WHERE id = $1
RETURNING id, theater_id, name, created_at, updated_at
`

type UpdateScreenParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateScreen(ctx context.Context, arg UpdateScreenParams) (Screen, error) {
	row := q.db.QueryRowContext(ctx, updateScreen, arg.ID, arg.Name)
	var i Screen
	err := row.Scan(
		&i.ID,
		&i.TheaterID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
